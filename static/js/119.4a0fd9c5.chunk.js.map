{"version":3,"sources":["q/64.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"wHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,KAAKC,wBAA2B,CAAEC,OAAO","file":"static/js/119.4a0fd9c5.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"64\" dangerouslySetInnerHTML = {{ __html: `\n<h6>64. 输出什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-const\">const</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> number<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-const\">const</span> <span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>value <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>number <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>A: <code>20</code>, <code>40</code>, <code>80</code>, <code>160</code></li>\n<li>B: <code>20</code>, <code>40</code>, <code>20</code>, <code>40</code></li>\n<li>C: <code>20</code>, <code>20</code>, <code>20</code>, <code>40</code></li>\n<li>D: <code>NaN</code>, <code>NaN</code>, <code>20</code>, <code>40</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: C</h4>\n<p>在ES6中，我们可以使用默认值初始化参数。如果没有给函数传参，或者传的参值为 <code>&quot;undefined&quot;</code> ，那么参数的值将是默认值。上述例子中，我们将 <code>value</code> 对象进行了解构并传到一个新对象中，因此 <code>x</code> 的默认值为 <code>{number：10}</code> 。</p>\n<p>默认参数在调用时才会进行计算，每次调用函数时，都会创建一个新的对象。我们前两次调用 <code>multiply</code> 函数且不传递值，那么每一次 <code>x</code> 的默认值都为 <code>{number：10}</code> ，因此打印出该数字的乘积值为<code>20</code>。</p>\n<p>第三次调用 <code>multiply</code> 时，我们传递了一个参数，即对象<code>value</code>。 <code>*=</code>运算符实际上是<code>x.number = x.number * 2</code>的简写，我们修改了<code>x.number</code>的值，并打印出值<code>20</code>。</p>\n<p>第四次，我们再次传递<code>value</code>对象。 <code>x.number</code>之前被修改为<code>20</code>，所以<code>x.number * = 2</code>打印为<code>40</code>。</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}