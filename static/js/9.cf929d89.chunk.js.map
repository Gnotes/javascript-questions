{"version":3,"sources":["q/104.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"qHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,MAAMC,wBAA2B,CAAEC,OAAO","file":"static/js/9.cf929d89.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"104\" dangerouslySetInnerHTML = {{ __html: `\n<h6>104. 结果是什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>A: <code>5</code></li>\n<li>B: <code>Promise {&lt;pending&gt;: 5}</code></li>\n<li>C: <code>Promise {&lt;fulfilled&gt;: 5}</code></li>\n<li>D: <code>Error</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: C</h4>\n<p>我们可以将我们想要的任何类型的值传递<code>Promise.resolve</code>，无论是否<code>promise</code>。 该方法本身返回带有已解析值的<code>Promise</code> (<code>&lt;fulfilled&gt;</code>)。 如果您传递常规函数，它将是具有常规值的已解决<code>promise</code>。 如果你通过了promise，它将是一个已经resolved的且带有传的值的promise。</p>\n<p>上述情况，我们传了数字5，因此返回一个resolved状态的promise，resolve值为<code>5</code></p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}