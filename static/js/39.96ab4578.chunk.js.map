{"version":3,"sources":["q/131.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"sHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,MAAMC,wBAA2B,CAAEC,OAAO","file":"static/js/39.96ab4578.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"131\" dangerouslySetInnerHTML = {{ __html: `\n<h6>131. 输出什么？</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-const\">const</span> emojis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"🥑\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"✨\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"✨\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"🍕\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍕\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emojis<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>A: <code>['🥑', ['✨', '✨', ['🍕', '🍕']]]</code></li>\n<li>B: <code>['🥑', '✨', '✨', ['🍕', '🍕']]</code></li>\n<li>C: <code>['🥑', ['✨', '✨', '🍕', '🍕']]</code></li>\n<li>D: <code>['🥑', '✨', '✨', '🍕', '🍕']</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: B</h4>\n<p>通过方法 <code>flat</code>， 我们可以创建一个新的, 已被扁平化的数组。被扁平化的深度取决于我们传递的值。在这个case里，我们传递了值 <code>1</code> (并不必要，这是默认值)，相当于只有第一层的数组才会被连接。即这个 case 里的 <code>['🥑']</code> and <code>['✨', '✨', ['🍕', '🍕']]</code>。连接这两个数组得到结果 <code>['🥑', '✨', '✨', ['🍕', '🍕']]</code>.</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}