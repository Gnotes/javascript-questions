{"version":3,"sources":["q/124.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"sHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,MAAMC,wBAA2B,CAAEC,OAAO","file":"static/js/31.3ed3f95f.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"124\" dangerouslySetInnerHTML = {{ __html: `\n<h6>124. 输出什么？</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-async\">async</span> <span class=\"token keyword keyword-function\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword keyword-yield\">yield</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword keyword-async\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword keyword-const\">const</span> gen <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword keyword-for\">for</span> <span class=\"token keyword keyword-await\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-const\">const</span> item <span class=\"token keyword keyword-of\">of</span> gen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>A: <code>Promise {1}</code> <code>Promise {2}</code> <code>Promise {3}</code></li>\n<li>B: <code>Promise {&lt;pending&gt;}</code> <code>Promise {&lt;pending&gt;}</code> <code>Promise {&lt;pending&gt;}</code></li>\n<li>C: <code>1</code> <code>2</code> <code>3</code></li>\n<li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: C</h4>\n<p>我们给 函数range 传递： <code>Promise{1}</code>, <code>Promise{2}</code>, <code>Promise{3}</code>，Generator 函数 <code>range</code> 返回一个全是 async object promise 数组。我们将 async object 赋值给变量 <code>gen</code>，之后我们使用<code>for await ... of</code> 进行循环遍历。我们将返回的 Promise 实例赋值给 <code>item</code>： 第一个返回 <code>Promise{1}</code>， 第二个返回 <code>Promise{2}</code>，之后是 <code>Promise{3}</code>。因为我们正 <em>awaiting</em> <code>item</code> 的值，resolved 状态的 promsie，promise数组的resolved <em>值</em> 以此为： <code>1</code>，<code>2</code>，<code>3</code>.</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}