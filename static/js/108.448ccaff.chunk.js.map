{"version":3,"sources":["q/54.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"wHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,KAAKC,wBAA2B,CAAEC,OAAO","file":"static/js/108.448ccaff.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"54\" dangerouslySetInnerHTML = {{ __html: `\n<h6>54. 输出是什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-let\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-typeof\">typeof</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-typeof\">typeof</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>A: <code>&quot;undefined&quot;, &quot;number&quot;</code></li>\n<li>B: <code>&quot;number&quot;, &quot;number&quot;</code></li>\n<li>C: <code>&quot;object&quot;, &quot;number&quot;</code></li>\n<li>D: <code>&quot;number&quot;, &quot;undefined&quot;</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: A</h4>\n<p><code>let x = y = 10;</code> 是下面这个表达式的缩写:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-let\">let</span> x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>我们设定<code>y</code>等于<code>10</code>时,我们实际上增加了一个属性<code>y</code>给全局对象(浏览器里的<code>window</code>, Nodejs里的<code>global</code>)。在浏览器中， <code>window.y</code>等于<code>10</code>.</p>\n<p>然后我们声明了变量<code>x</code>等于<code>y</code>,也是<code>10</code>.但变量是使用 <code>let</code>声明的，它只作用于 <em>块级作用域</em>, 仅在声明它的块中有效；就是案例中的立即调用表达式(IIFE)。使用<code>typeof</code>操作符时, 操作值 <code>x</code>没有被定义：因为我们在<code>x</code>声明块的外部，无法调用它。这就意味着<code>x</code>未定义。未分配或是未声明的变量类型为<code>&quot;undefined&quot;</code>. <code>console.log(typeof x)</code>返回<code>&quot;undefined&quot;</code>.</p>\n<p>而我们创建了全局变量<code>y</code>，并且设定<code>y</code>等于<code>10</code>.这个值在我们的代码各处都访问的到。 <code>y</code>已经被定义了，而且有一个<code>&quot;number&quot;</code>类型的值。 <code>console.log(typeof y)</code>返回<code>&quot;number&quot;</code>.</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}