{"version":3,"sources":["q/9.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"wHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,IAAIC,wBAA2B,CAAEC,OAAO","file":"static/js/144.75a98455.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"9\" dangerouslySetInnerHTML = {{ __html: `\n<h6>9. 输出是什么？</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-let\">let</span> greeting\ngreetign <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Typo!</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greetign<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>A: <code>{}</code></li>\n<li>B: <code>ReferenceError: greetign is not defined</code></li>\n<li>C: <code>undefined</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: A</h4>\n<p>代码打印出了一个对象，这是因为我们在全局对象上创建了一个空对象！当我们将 <code>greeting</code> 写错成 <code>greetign</code> 时，JS 解释器实际在上浏览器中将它视为 <code>global.greetign = {}</code> （或者 <code>window.greetign = {}</code>）。</p>\n<p>为了避免这个为题，我们可以使用 \\`&quot;use strict&quot;。这能确保当你声明变量时必须赋值。</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}