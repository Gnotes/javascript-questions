{"version":3,"sources":["q/149.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"sHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,MAAMC,wBAA2B,CAAEC,OAAO","file":"static/js/58.abb489b2.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"149\" dangerouslySetInnerHTML = {{ __html: `\n<h6>152. 输出什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-const\">const</span> promise1 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'First'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-const\">const</span> promise2 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Second'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-const\">const</span> promise3 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Third'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-const\">const</span> promise4 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fourth'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-const\">const</span> <span class=\"token function-variable function\">runPromises</span> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-async\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword keyword-const\">const</span> res1 <span class=\"token operator\">=</span> <span class=\"token keyword keyword-await\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span> promise2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword keyword-const\">const</span> res2  <span class=\"token operator\">=</span> <span class=\"token keyword keyword-await\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise3<span class=\"token punctuation\">,</span> promise4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">[</span>res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runPromises</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>A: <code>[['First', 'Second'], ['Fourth']]</code></li>\n<li>B: <code>[['First', 'Second'], ['Third', 'Fourth']]</code></li>\n<li>C: <code>[['First', 'Second']]</code></li>\n<li>D: <code>'Third'</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: D</h4>\n<p><code>Promise.all</code> 方法可以并行式运行promise。如果其中一个promise失败了，<code>Promise.all</code> 方法会带上被reject的promise的值_rejects_。在这个例子中， <code>promise3</code> 带着 <code>&quot;Third&quot;</code> 值reject。我们在调用 <code>runPromises</code> 时在 <code>runPromises</code> 函数内部的 <code>catch</code> 方法去捕获任意error从而捕获到被reject的值。因为 <code>promise3</code> 带着 <code>&quot;Third&quot;</code> 被reject，所以只有 <code>&quot;Third&quot;</code> 打印。</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}