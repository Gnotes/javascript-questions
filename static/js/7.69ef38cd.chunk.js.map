{"version":3,"sources":["q/102.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"qHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,MAAMC,wBAA2B,CAAEC,OAAO","file":"static/js/7.69ef38cd.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"102\" dangerouslySetInnerHTML = {{ __html: `\n<h6>104. 结果是什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>A: <code>5</code></li>\n<li>B: <code>Promise {&lt;pending&gt;: 5}</code></li>\n<li>C: <code>Promise {&lt;fulfilled&gt;: 5}</code></li>\n<li>D: <code>Error</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: C</h4>\n<p>我们可以将我们想要的任何类型的值传递<code>Promise.resolve</code>，无论是否<code>promise</code>。 该方法本身返回带有已解析值的<code>Promise</code> (<code>&lt;fulfilled&gt;</code>)。 如果您传递常规函数，它将是具有常规值的已解决<code>promise</code>。 如果你通过了promise，它将是一个已经resolved的且带有传的值的promise。</p>\n<p>上述情况，我们传了数字5，因此返回一个resolved状态的promise，resolve值为<code>5</code></p>\n</p>\n</details>\n<h6>105. 输出什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">compareMembers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person1<span class=\"token punctuation\">,</span> person2 <span class=\"token operator\">=</span> person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>person1 <span class=\"token operator\">!==</span> person2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not the same!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"They are the same!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-const\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Lydia\"</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">compareMembers</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>A: <code>Not the same!</code></li>\n<li>B: <code>They are the same!</code></li>\n<li>C: <code>ReferenceError</code></li>\n<li>D: <code>SyntaxError</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: B</h4>\n<p>对象通过引用传递。 当我们检查对象的严格相等性（===）时，我们正在比较它们的引用。</p>\n<p>我们将“person2”的默认值设置为“person”对象，并将“person”对象作为“person1”的值传递。</p>\n<p>这意味着两个值都引用内存中的同一位置，因此它们是相等的。</p>\n<p>运行“ else”语句中的代码块，并记录<code>They are the same!</code> 。</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}