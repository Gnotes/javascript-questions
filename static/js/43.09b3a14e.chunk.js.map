{"version":3,"sources":["q/135.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"sHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,MAAMC,wBAA2B,CAAEC,OAAO","file":"static/js/43.09b3a14e.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"135\" dangerouslySetInnerHTML = {{ __html: `\n<h6>135. 输出什么？</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-const\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Added a new property!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accessed a property!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-const\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Lydia\"</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>A: <code>Added a new property!</code></li>\n<li>B: <code>Accessed a property!</code></li>\n<li>C: <code>Added a new property!</code> <code>Accessed a property!</code></li>\n<li>D: 没有任何输出</li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: C</h4>\n<p>使用 Proxy 对象，我们可以给一个对象添加自定义行为。在这个 case，我们传递一个包含以下属性的对象 <code>handler</code> : <code>set</code> and <code>get</code>。每当我门 <em>设置</em> 属性值时 <code>set</code> 被调用，每当我们 <em>获取</em> 时 <code>get</code> 被调用。</p>\n<p>第一个参数是一个空对象 <code>{}</code>，作为 <code>person</code> 的值。对于这个对象，自定义行为被定义在对象 <code>handler</code>。如果我们向对象 <code>person</code> 添加属性，<code>set</code> 将被调用。如果我们获取 <code>person</code> 的属性, <code>get</code> 将被调用。</p>\n<p>首先，我们向 proxy 对象(<code>person.name = &quot;Lydia&quot;</code>)添加一个属性 <code>name</code>。<code>set</code> 被调用并输出 <code>&quot;Added a new property!&quot;</code>。</p>\n<p>然后，我们获取 proxy 对象的一个属性，对象 handler 的属性 <code>get</code> 被调用。输出 <code>&quot;Accessed a property!&quot;</code>。</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}