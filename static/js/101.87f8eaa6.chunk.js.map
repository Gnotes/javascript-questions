{"version":3,"sources":["q/50.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"wHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,KAAKC,wBAA2B,CAAEC,OAAO","file":"static/js/101.87f8eaa6.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"50\" dangerouslySetInnerHTML = {{ __html: `\n<h6>51. 输出的是什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">member<span class=\"token punctuation\">,</span> year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  member<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Lydia\"</span><span class=\"token punctuation\">;</span>\n  year <span class=\"token operator\">=</span> <span class=\"token string\">\"1998\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-const\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Sarah\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-const\">const</span> birthYear <span class=\"token operator\">=</span> <span class=\"token string\">\"1997\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> birthYear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> birthYear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>A: <code>{ name: &quot;Lydia&quot; }, &quot;1997&quot;</code></li>\n<li>B: <code>{ name: &quot;Sarah&quot; }, &quot;1998&quot;</code></li>\n<li>C: <code>{ name: &quot;Lydia&quot; }, &quot;1998&quot;</code></li>\n<li>D: <code>{ name: &quot;Sarah&quot; }, &quot;1997&quot;</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: A</h4>\n<p>普通参数都是 <em>值</em> 传递的，而对象则不同，是 <em>引用</em> 传递。所以说，<code>birthYear</code>是值传递，因为他是个字符串而不是对象。当我们对参数进行值传递时，会创建一份该值的 <em>复制</em> 。（可以参考问题46）</p>\n<p>变量<code>birthYear</code>有一个对<code>&quot;1997&quot;</code>的引用，而传入的参数也有一个对<code>&quot;1997&quot;</code>的引用，但二者的引用并不相同。当我们通过给 <code>year</code>赋值<code>&quot;1998&quot;</code>来更新<code>year</code>的值的时候我们只是更新了<code>year</code>（的引用）。此时<code>birthYear</code>仍然是<code>&quot;1997&quot;</code>.</p>\n<p>而<code>person</code>是个对象。参数<code>member</code>引用与之 <em>相同的</em> 对象。当我们修改<code>member</code>所引用对象的属性时,<code>person</code>的相应属性也被修改了,因为他们引用了相同的对象. <code>person</code>的 <code>name</code>属性也变成了 <code>&quot;Lydia&quot;</code>.</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}