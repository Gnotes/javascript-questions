{"version":3,"sources":["q/61.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"wHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,KAAKC,wBAA2B,CAAEC,OAAO","file":"static/js/116.9052352e.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"61\" dangerouslySetInnerHTML = {{ __html: `\n<h6>61. 输出是什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-const\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Lydia\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>A: <code>{ name: &quot;Lydia&quot;, age: 21 }</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li>\n<li>B: <code>{ name: &quot;Lydia&quot;, age: 21 }</code>, <code>[&quot;name&quot;]</code></li>\n<li>C: <code>{ name: &quot;Lydia&quot;}</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li>\n<li>D: <code>{ name: &quot;Lydia&quot;}</code>, <code>[&quot;age&quot;]</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: B</h4>\n<p>通过<code>defineProperty</code>方法，我们可以给对象添加一个新属性，或者修改已经存在的属性。而我们使用<code>defineProperty</code>方法给对象添加了一个属性之后，属性默认为 <em>不可枚举(not enumerable)</em>. <code>Object.keys</code>方法仅返回对象中 <em>可枚举(enumerable)</em> 的属性，因此只剩下了<code>&quot;name&quot;</code>.</p>\n<p>用<code>defineProperty</code>方法添加的属性默认不可变。你可以通过<code>writable</code>, <code>configurable</code> 和 <code>enumerable</code>属性来改变这一行为。这样的话， 相比于自己添加的属性，<code>defineProperty</code>方法添加的属性有了更多的控制权。</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}