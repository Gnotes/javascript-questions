{"version":3,"sources":["q/93.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"wHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,KAAKC,wBAA2B,CAAEC,OAAO","file":"static/js/151.6629bf09.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"93\" dangerouslySetInnerHTML = {{ __html: `\n<h6>93. 输出什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-const\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Lydia\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">21</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-const\">const</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-of\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>A: <code>name</code> <code>Lydia</code> and <code>age</code> <code>21</code></li>\n<li>B: <code>[&quot;name&quot;, &quot;Lydia&quot;]</code> and <code>[&quot;age&quot;, 21]</code></li>\n<li>C: <code>[&quot;name&quot;, &quot;age&quot;]</code> and <code>undefined</code></li>\n<li>D: <code>Error</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: A</h4>\n<p><code>Object.entries()</code>方法返回一个给定对象自身可枚举属性的键值对数组，上述情况返回一个二维数组，数组每个元素是一个包含键和值的数组：</p>\n<p><code>[['name'，'Lydia']，['age'，21]]</code></p>\n<p>使用<code>for-of</code>循环，我们可以迭代数组中的每个元素，上述情况是子数组。 我们可以使用<code>const [x，y]</code>在<code>for-of</code>循环中解构子数组。 <code>x</code>等于子数组中的第一个元素，<code>y</code>等于子数组中的第二个元素。</p>\n<p>第一个子阵列是<code>[“name”，“Lydia”]</code>，其中<code>x</code>等于<code>name</code>，而<code>y</code>等于<code>Lydia</code>。\n第二个子阵列是<code>[“age”，21]</code>，其中<code>x</code>等于<code>age</code>，而<code>y</code>等于<code>21</code>。</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}