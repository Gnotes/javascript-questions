{"version":3,"sources":["q/111.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"sHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,MAAMC,wBAA2B,CAAEC,OAAO","file":"static/js/17.40c7cddf.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"111\" dangerouslySetInnerHTML = {{ __html: `\n<h6>114. 将会发生什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-let\">let</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  alert<span class=\"token operator\">:</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Alert!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconfig <span class=\"token operator\">=</span> <span class=\"token keyword keyword-null\">null</span>\n</code></pre>\n<ul>\n<li>A: <code>setInterval</code> 的回调不会被调用</li>\n<li>B: <code>setInterval</code> 的回调被调用一次</li>\n<li>C: <code>setInterval</code> 的回调仍然会被每秒钟调用</li>\n<li>D: 我们从没调用过 <code>config.alert()</code>, config 为 <code>null</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: C</h4>\n<p>一般情况下当我们将对象赋值为 <code>null</code>, 那些对象会被进行 <em>垃圾回收（garbage collected）</em> 因为已经没有对这些对象的引用了。然而，<code>setInterval</code>的参数是一个箭头函数（所以上下文绑定到对象 <code>config</code> 了），回调函数仍然保留着对 <code>config</code>的引用。只要存在引用，对象就不会被垃圾回收。因为没有被垃圾回收，<code>setInterval</code> 的回调每1000ms (1s)会被调用一次。</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}