{"version":3,"sources":["q/1.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"qHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,IAAIC,wBAA2B,CAAEC,OAAO","file":"static/js/3.f1b20578.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"1\" dangerouslySetInnerHTML = {{ __html: `\n<h6>1. 输出是什么？</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword keyword-var\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Lydia'</span>\n  <span class=\"token keyword keyword-let\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>A: <code>Lydia</code> 和 <code>undefined</code></li>\n<li>B: <code>Lydia</code> 和 <code>ReferenceError</code></li>\n<li>C: <code>ReferenceError</code> 和 <code>21</code></li>\n<li>D: <code>undefined</code> 和 <code>ReferenceError</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: D</h4>\n<p>在函数内部，我们首先通过 <code>var</code> 关键字声明了 <code>name</code> 变量。这意味着变量被提升了（内存空间在创建阶段就被设置好了），直到程序运行到定义变量位置之前默认值都是 <code>undefined</code>。因为当我们打印 <code>name</code> 变量时还没有执行到定义变量的位置，因此变量的值保持为 <code>undefined</code>。</p>\n<p>通过 <code>let</code> 和 <code>const</code> 关键字声明的变量也会提升，但是和 <code>var</code> 不同，它们不会被<i>初始化</i>。在我们声明（初始化）之前是不能访问它们的。这个行为被称之为暂时性死区。当我们试图在声明之前访问它们时，JavaScript 将会抛出一个 <code>ReferenceError</code> 错误。</p>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}