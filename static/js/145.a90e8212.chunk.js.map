{"version":3,"sources":["q/88.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"wHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,KAAKC,wBAA2B,CAAEC,OAAO","file":"static/js/145.a90e8212.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"88\" dangerouslySetInnerHTML = {{ __html: `\n<h6>88. 输出什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> num1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>A: <code>NaN</code></li>\n<li>B: <code>20</code></li>\n<li>C: <code>ReferenceError</code></li>\n<li>D: <code>undefined</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: B</h4>\n<p>您可以将默认参数的值设置为函数的另一个参数，只要另一个参数定义在其之前即可。 我们将值<code>10</code>传递给<code>sum</code>函数。 如果<code>sum</code>函数只接收1个参数，则意味着没有传递<code>num2</code>的值，这种情况下，<code>num1</code>的值等于传递的值<code>10</code>。 <code>num2</code>的默认值是<code>num1</code>的值，即<code>10</code>。 <code>num1 + num2</code>返回<code>20</code>。</p>\n<p>如果您尝试将默认参数的值设置为后面定义的参数，则可能导致参数的值尚未初始化，从而引发错误。比如：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught ReferenceError: Cannot access 'n' before initialization</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 2</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 4</span>\n</code></pre>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}