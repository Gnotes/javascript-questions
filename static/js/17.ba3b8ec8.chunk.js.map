{"version":3,"sources":["q/111.js"],"names":["className","data-index","dangerouslySetInnerHTML","__html"],"mappings":"sHAAe,qBACT,OACE,qBAAKA,UAAU,WAAWC,aAAW,MAAMC,wBAA2B,CAAEC,OAAO","file":"static/js/17.ba3b8ec8.chunk.js","sourcesContent":["export default ()=> {\n      return (\n        <div className=\"question\" data-index=\"111\" dangerouslySetInnerHTML = {{ __html: `\n<h6>111. 输出什么?</h6>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-let\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Lydia'</span>\n\n<span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword keyword-let\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Sarah'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>A: Lydia</li>\n<li>B: Sarah</li>\n<li>C: <code>undefined</code></li>\n<li>D: <code>ReferenceError</code></li>\n</ul>\n<details><summary><b>答案</b></summary>\n<p>\n<h4>答案: D</h4>\n<p>每个函数都有其自己的执行上下文。 <code>getName</code>函数首先在其自身的上下文（范围）内查找，以查看其是否包含我们尝试访问的变量<code>name</code>。 上述情况，<code>getName</code>函数包含其自己的<code>name</code>变量：我们用<code>let</code>关键字和<code>Sarah</code>的值声明变量<code>name</code>。</p>\n<p>带有<code>let</code>关键字（和<code>const</code>）的变量被提升，但是与<code>var</code>不同，它不会被<em><strong>初始化</strong></em>。 在我们声明（初始化）它们之前，无法访问它们。 这称为“暂时性死区”。 当我们尝试在声明变量之前访问变量时，JavaScript会抛出<code>ReferenceError: Cannot access 'name' before initialization</code>。</p>\n<p>如果我们不在<code>getName</code>函数中声明<code>name</code>变量，则javascript引擎会查看原型练。会找到其外部作用域有一个名为<code>name</code>的变量，其值为<code>Lydia</code>。 在这种情况下，它将打印<code>Lydia</code>：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword keyword-let\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Lydia'</span>\n\n<span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Lydia</span>\n</code></pre>\n</p>\n</details>\n` }}></div>\n      );\n    }"],"sourceRoot":""}